# -*- coding: utf-8 -*-
"""190376N_label3 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1npcIFCY5vEFgJOMnytlqqpYSPwbB9Z-x
"""

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import RobustScaler
from sklearn.svm import SVC
from sklearn.feature_selection import SelectKBest

from sklearn.metrics import precision_score, recall_score, accuracy_score

# Load the data
train_data = pd.read_csv('train.csv')
valid_data = pd.read_csv('valid.csv')
test_data = pd.read_csv('test.csv')

# Drop the columns that are not required
X_train = train_data.drop(['label_1', 'label_2', 'label_3', 'label_4'], axis=1)
y_label3_train = train_data['label_3']

X_valid = valid_data.drop(['label_1', 'label_2', 'label_3', 'label_4'], axis=1)
y_valid_label_3 = valid_data['label_3']

X_test = test_data.drop(['label_1', 'label_2', 'label_3', 'label_4'], axis=1)
# Initialize models with  hyperparameters
model_label3 =  SVC()

# Train models
model_label3.fit(X_train, y_label3_train)

# Predictions
pred_label3 = model_label3.predict(X_valid)
pred_label3_test = model_label3.predict(X_test)
# Calculate accuracy
accuracy = accuracy_score(y_valid_label_3, pred_label3)
precision = precision_score(y_valid_label_3, pred_label3, average='weighted', zero_division=1)
recall = recall_score(y_valid_label_3, pred_label3, average='weighted')

print(f"Metrics for label 3 on before feature engineering:")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print("\n")

output_label3 = pd.DataFrame(index=range(750))
output_label3['Predicted labels before feature engineering'] = np.nan

# Fill the available rows with predicted values
output_label3.loc[:len(pred_label3)-1, 'Predicted labels before feature engineering'] = pred_label3_test

"""Applying Feature Engineering techniques"""

sc = RobustScaler()

X_train_scaled = sc.fit_transform(X_train)
X_valid_scaled = sc.transform(X_valid)
X_test_scaled = sc.transform(X_test)
#select best features
k = 80  # Select the top 10 features
k_best = SelectKBest(k=k)
X_train_k_best = k_best.fit_transform(X_train_scaled, y_label3_train)
X_valid_k_best = k_best.transform(X_valid_scaled)
X_test_k_best = k_best.transform(X_test_scaled)
#ploting the graph to see the best features by sorting the scores
import matplotlib.pyplot as plt
plt.figure(figsize=(12, 8))
plt.bar(range(len(k_best.scores_)), k_best.scores_)
plt.xticks(range(len(k_best.scores_)), X_train.columns, rotation='vertical')
plt.show()

model_label3.fit(X_train_k_best,y_label3_train)
pred_label3= model_label3.predict(X_valid_k_best)

accuracy_label3 = accuracy_score(y_valid_label_3, pred_label3)
print(f'Accuracy for Label 3 after k best features selecting: {accuracy_label3}')

# Calculate the variance threshold
desired_variance = 0.8  # Set the desired explained variance
pca = PCA(n_components=desired_variance, svd_solver='full')
X_train_pca = pca.fit_transform(X_train_k_best)
X_valid_pca =pca.transform(X_valid_k_best)
X_test_pca = pca.transform(X_test_k_best)
# Get the number of components selected based on the variance threshold
n_components = pca.n_components_

model_label3.fit(X_train_pca,y_label3_train)
pred_label3= model_label3.predict(X_valid_pca)
pred_label3_test = model_label3.predict(X_test_pca)

# Calculate metrics for classification evaluation on validation data
accuracy = accuracy_score(y_valid_label_3, pred_label3)
precision = precision_score(y_valid_label_3, pred_label3, average='weighted', zero_division=1)
recall = recall_score(y_valid_label_3, pred_label3, average='weighted')

print(f"Metrics for label 3 on after feature engineering:")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print("\n")


output_label3['Predicted labels after feature engineering']=pred_label3_test
output_label3['No of new features']=n_components
# Add PCA components to the DataFrame
for i in range(n_components):
    component_name = f'new_feature_{i+1}'
    output_label3[component_name] = X_test_pca[:, i]

# Save the output DataFrame to a CSV file
output_label3.to_csv('190376N_lable_3.csv', index=False)